import java.util.Random;


public class Main {
	public static void main(String[] args){
		
		//INITIALIZATION 
			//number of towns in our country
		int numberTowns = 100;
			//The population of travels we will take
		int pop = 25;
			//the value of the mutation rate
		double mutValue = 0.7;
			//the lengths between the roads in our country
		int[][] country = new int[numberTowns][numberTowns];
			//we fill our country with random values
		fillRoads(country, numberTowns);
			
		
			//we create a map that we fill with our country
		Map map = new Map(numberTowns);
		map.fillRoads(country);
		

		
			//the population is a set of Travel
		Travel[] popul = new Travel[pop];
			//the first population is solely composed of stupid Travels 
		for(int j = 0; j < pop; j++){
			popul[j] = initialParent;
		}
		Population population = new Population(pop, popul);
		
	}
	
	/**
	 * Function that fill a tab with random values
	 * @param tab the tab to fill
	 * @param n the size of the tab (tab is a square matrix)
	 */
	public static void fillRoads(int[][] tab, int n){
		
		Random rand = new Random();
		int a = rand.nextInt(10) + 1;
		
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				tab[i][j] = a; 
			}
		}
	}
	

	
	/**
	 * Function that create an offspring following the chosen law
	 */
	public static Travel combination(Couple couple){
		
		int nbrT = couple.getParent1().getNbrTowns();
		int[] path = new int[nbrT];
		for(int i = 0; i < nbrT; i++){
			path[i] = 0;
		}
		
		int nextIndex = 0;
		
		Travel offspring = new Travel(nbrT, path);
		boolean cycle = false;
		
		for(int j = 0; j < nbrT; j++){
				//First of all we check if we created a cycle
			for(int k = 0; k < nbrT; k++){
				if(offspring.getPath()[k] != 0 && offspring.check(couple.getParent2().getElement(k))){
					cycle = true;
				}
				if(cycle){break;}
			
					//We copy the value of Parent1 in offspring at the nextIndex
				offspring.setInt(couple.getParent1().getElement(nextIndex),nextIndex);
					//We change the value of nextIndex, by the corresponding index of parent2
				nextIndex = couple.getParent1().indexOf(couple.getParent2().getElement(nextIndex));
				
			}
				
		}
		
		//fill the rest of offspring with parent2
		for(int l = 0; l < nbrT; l ++){
			if(offspring.getElement(l) == 0){
				offspring.setInt(couple.getParent2().getElement(l), l);
			}
		}
		
		return offspring;
	}

	/**
	 * Function that simulate random mutation
	 */
	public static Travel optimizeLocal(Travel t){
		Random iRand = new Random();
		int a = iRand.nextInt(t.getNbrTowns());
		int b;
		do{
			b = iRand.nextInt(t.getNbrTowns());
		}while(a != b);
			t.reverse(a, b);
		
		return t;
	}
}
